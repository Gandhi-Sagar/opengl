/* Demonstrates how to stipple polygons.
 * This is eighth exercise in the 3rd chapter of the superbible
 * Sagar Gandhi | 08/05/2020
*/

#include <GL/glut.h>

GLubyte curtain[] = {0x38, 0x29, 0x35, 0x21, 0x21, 0x18, 0x13, 0x10, 0x19, 0x1c, 0x25, 0x1a, 0x1a, 0x1b, 0xa, 0x39, 0x10, 0x1d, 0x1d, 0x1c, 0x20, 0x1c, 0x30, 0x2b,                  0x1a, 0x28, 0x1a, 0x17, 0x1d, 0x2d, 0x35, 0x3a,
                  0x3a, 0x2d, 0x3b, 0x25, 0x25, 0x19, 0x16, 0x11, 0x1b, 0x20, 0x29, 0x1e, 0x1d, 0x1b, 0xa, 0x3b, 0x12, 0x1d, 0x1f, 0x1e, 0x23, 0x1e, 0x30, 0x2a, 0x1d, 0x2b, 0x1c, 0x19, 0x27, 0x34, 0x39, 0x3a,
                  0x3b, 0x2f, 0x3f, 0x2b, 0x2a, 0x1b, 0x16, 0x11, 0x1c, 0x22, 0x2e, 0x1f, 0x20, 0x1d, 0x8, 0x38, 0x12, 0x1e, 0x21, 0x1e, 0x25, 0x1c, 0x2f, 0x29, 0x1d, 0x2f, 0x1e, 0x1b, 0x31, 0x37, 0x3a, 0x39,
                  0x3a, 0x2f, 0x42, 0x31, 0x2f, 0x20, 0x17, 0x13, 0x1f, 0x26, 0x33, 0x20, 0x22, 0x1e, 0x9, 0x37, 0x13, 0x20, 0x21, 0x20, 0x27, 0x1f, 0x2d, 0x28, 0x1f, 0x32, 0x20, 0x20, 0x36, 0x3a, 0x39, 0x3b,
                  0x39, 0x2f, 0x44, 0x35, 0x35, 0x28, 0x17, 0x16, 0x1e, 0x29, 0x33, 0x1f, 0x24, 0x21, 0x9, 0x34, 0x15, 0x21, 0x22, 0x20, 0x2a, 0x1c, 0x2c, 0x29, 0x21, 0x36, 0x25, 0x25, 0x39, 0x3d, 0x39, 0x3c,
                  0x36, 0x30, 0x42, 0x35, 0x38, 0x31, 0x1c, 0x19, 0x20, 0x29, 0x33, 0x21, 0x26, 0x23, 0x8, 0x32, 0x17, 0x22, 0x21, 0x23, 0x2c, 0x1c, 0x29, 0x2b, 0x23, 0x3a, 0x2b, 0x28, 0x39, 0x3c, 0x39, 0x3c,
                  0x34, 0x30, 0x41, 0x37, 0x37, 0x37, 0x1f, 0x1d, 0x20, 0x2a, 0x31, 0x21, 0x27, 0x25, 0x8, 0x31, 0x1a, 0x25, 0x21, 0x25, 0x2e, 0x1b, 0x29, 0x2d, 0x29, 0x3f, 0x2e, 0x2a, 0x37, 0x3b, 0x39, 0x3c,
                  0x32, 0x30, 0x3f, 0x39, 0x36, 0x38, 0x23, 0x25, 0x25, 0x2b, 0x2f, 0x20, 0x2a, 0x25, 0xa, 0x31, 0x1c, 0x26, 0x23, 0x25, 0x2f, 0x1c, 0x2a, 0x30, 0x2c, 0x40, 0x2f, 0x2a, 0x34, 0x3c, 0x39, 0x3c,
                  0x32, 0x33, 0x3f, 0x3a, 0x36, 0x3a, 0x26, 0x29, 0x2a, 0x30, 0x2d, 0x22, 0x2b, 0x28, 0x9, 0x30, 0x1e, 0x29, 0x23, 0x25, 0x2f, 0x1e, 0x2d, 0x33, 0x32, 0x3e, 0x2d, 0x2b, 0x31, 0x3a, 0x39, 0x3d,
                  0x32, 0x35, 0x3f, 0x39, 0x36, 0x39, 0x29, 0x2d, 0x30, 0x36, 0x2e, 0x20, 0x2a, 0x2b, 0xc, 0x30, 0x1e, 0x2c, 0x25, 0x26, 0x30, 0x20, 0x31, 0x36, 0x34, 0x3c, 0x2b, 0x2f, 0x2f, 0x3b, 0x38, 0x3d,
                  0x31, 0x37, 0x40, 0x37, 0x36, 0x3a, 0x2c, 0x2d, 0x31, 0x3a, 0x2f, 0x23, 0x2c, 0x2c, 0xb, 0x32, 0x1f, 0x2c, 0x27, 0x26, 0x32, 0x23, 0x34, 0x39, 0x35, 0x3d, 0x2a, 0x31, 0x2d, 0x3b, 0x38, 0x3d,
                  0x32, 0x3a, 0x3f, 0x34, 0x38, 0x37, 0x2f, 0x2b, 0x34, 0x3b, 0x33, 0x26, 0x2e, 0x2d, 0xc, 0x34, 0x21, 0x2d, 0x2b, 0x28, 0x37, 0x27, 0x34, 0x38, 0x36, 0x3a, 0x2d, 0x32, 0x2d, 0x3c, 0x38, 0x3d,
                  0x32, 0x3a, 0x42, 0x32, 0x37, 0x37, 0x33, 0x2c, 0x35, 0x3a, 0x34, 0x2b, 0x31, 0x2e, 0xc, 0x36, 0x23, 0x30, 0x2f, 0x2b, 0x3b, 0x28, 0x36, 0x36, 0x36, 0x39, 0x2f, 0x32, 0x2b, 0x3c, 0x38, 0x3b,
                  0x35, 0x3c, 0x42, 0x2e, 0x39, 0x35, 0x36, 0x2c, 0x37, 0x3a, 0x35, 0x2d, 0x36, 0x31, 0xd, 0x37, 0x28, 0x2e, 0x34, 0x2f, 0x3d, 0x2a, 0x37, 0x34, 0x36, 0x37, 0x30, 0x34, 0x2c, 0x3b, 0x38, 0x3b,
                  0x37, 0x3e, 0x43, 0x2d, 0x3a, 0x33, 0x39, 0x2b, 0x38, 0x38, 0x36, 0x2e, 0x38, 0x36, 0xf, 0x36, 0x2e, 0x30, 0x38, 0x30, 0x3c, 0x2b, 0x37, 0x35, 0x34, 0x34, 0x33, 0x32, 0x2a, 0x3b, 0x38, 0x39,
                  0x38, 0x3f, 0x43, 0x29, 0x3b, 0x32, 0x3b, 0x2c, 0x39, 0x36, 0x36, 0x2e, 0x39, 0x3a, 0x14, 0x39, 0x31, 0x34, 0x3b, 0x31, 0x3c, 0x2c, 0x38, 0x33, 0x36, 0x36, 0x35, 0x33, 0x2a, 0x3a, 0x37, 0x38,
				  0x39, 0x42, 0x42, 0x28, 0x3b, 0x31, 0x3d, 0x2c, 0x3c, 0x33, 0x38, 0x2c, 0x38, 0x3a, 0x16, 0x3c, 0x38, 0x37, 0x3b, 0x31, 0x3b, 0x2b, 0x38, 0x31, 0x35, 0x34, 0x37, 0x33, 0x2b, 0x3a, 0x36, 0x36,
                  0x37, 0x42, 0x40, 0x26, 0x3b, 0x30, 0x3e, 0x30, 0x3d, 0x31, 0x38, 0x2d, 0x36, 0x3b, 0x19, 0x40, 0x3e, 0x38, 0x3a, 0x31, 0x3b, 0x2d, 0x3a, 0x34, 0x36, 0x36, 0x36, 0x33, 0x2e, 0x39, 0x35, 0x34,
                  0x38, 0x42, 0x3d, 0x26, 0x3b, 0x34, 0x3b, 0x32, 0x3d, 0x30, 0x38, 0x2c, 0x37, 0x3c, 0x1f, 0x41, 0x43, 0x3c, 0x3c, 0x30, 0x39, 0x2e, 0x3b, 0x32, 0x37, 0x35, 0x37, 0x32, 0x31, 0x38, 0x34, 0x33,
                  0x36, 0x43, 0x3b, 0x28, 0x39, 0x34, 0x3a, 0x36, 0x3d, 0x2e, 0x37, 0x30, 0x37, 0x3e, 0x25, 0x41, 0x44, 0x3e, 0x3f, 0x33, 0x36, 0x30, 0x3d, 0x33, 0x36, 0x34, 0x36, 0x30, 0x31, 0x36, 0x33, 0x33,
                  0x36, 0x41, 0x38, 0x2a, 0x39, 0x35, 0x3a, 0x37, 0x3f, 0x30, 0x35, 0x31, 0x3a, 0x41, 0x2b, 0x3f, 0x42, 0x3f, 0x40, 0x37, 0x36, 0x31, 0x3c, 0x32, 0x36, 0x33, 0x35, 0x30, 0x32, 0x33, 0x32, 0x31,
                  0x32, 0x41, 0x33, 0x2b, 0x39, 0x35, 0x38, 0x39, 0x3e, 0x30, 0x32, 0x37, 0x3b, 0x42, 0x2d, 0x3d, 0x42, 0x40, 0x42, 0x3b, 0x3a, 0x34, 0x3c, 0x35, 0x36, 0x33, 0x31, 0x30, 0x36, 0x30, 0x2f, 0x2d,
                  0x2d, 0x3f, 0x30, 0x2d, 0x37, 0x37, 0x35, 0x39, 0x3e, 0x33, 0x32, 0x3b, 0x3e, 0x44, 0x32, 0x3d, 0x42, 0x42, 0x42, 0x3d, 0x3c, 0x36, 0x3e, 0x38, 0x36, 0x36, 0x2c, 0x30, 0x39, 0x30, 0x2d, 0x2b,
                  0x29, 0x3c, 0x2f, 0x2f, 0x37, 0x38, 0x34, 0x3b, 0x3f, 0x38, 0x33, 0x3e, 0x3f, 0x45, 0x34, 0x3b, 0x41, 0x43, 0x42, 0x3d, 0x3e, 0x3b, 0x3f, 0x3a, 0x38, 0x36, 0x29, 0x30, 0x3b, 0x2e, 0x2c, 0x27,
                  0x25, 0x38, 0x2d, 0x30, 0x37, 0x39, 0x34, 0x3c, 0x3f, 0x3b, 0x34, 0x40, 0x3f, 0x45, 0x36, 0x3d, 0x41, 0x43, 0x42, 0x3d, 0x3f, 0x3e, 0x42, 0x3d, 0x38, 0x38, 0x29, 0x2f, 0x3d, 0x2b, 0x2b, 0x25,
                  0x25, 0x31, 0x2d, 0x30, 0x38, 0x38, 0x33, 0x40, 0x40, 0x40, 0x34, 0x41, 0x3f, 0x47, 0x37, 0x3e, 0x40, 0x46, 0x40, 0x3c, 0x3d, 0x41, 0x45, 0x42, 0x3a, 0x37, 0x27, 0x2e, 0x3e, 0x27, 0x2a, 0x22,
                  0x24, 0x2c, 0x2a, 0x32, 0x3a, 0x37, 0x34, 0x40, 0x42, 0x42, 0x36, 0x40, 0x40, 0x46, 0x38, 0x3f, 0x42, 0x45, 0x41, 0x3c, 0x3f, 0x40, 0x45, 0x43, 0x3d, 0x3b, 0x25, 0x2e, 0x3d, 0x24, 0x27, 0x20,
                  0x22, 0x25, 0x28, 0x33, 0x39, 0x39, 0x37, 0x43, 0x44, 0x43, 0x39, 0x42, 0x3e, 0x48, 0x3a, 0x3e, 0x41, 0x47, 0x40, 0x3c, 0x3f, 0x40, 0x46, 0x43, 0x41, 0x3e, 0x27, 0x30, 0x3f, 0x1e, 0x25, 0x20,
                  0x22, 0x22, 0x24, 0x34, 0x3b, 0x39, 0x39, 0x41, 0x44, 0x45, 0x3a, 0x41, 0x3d, 0x48, 0x3b, 0x3f, 0x43, 0x47, 0x41, 0x3c, 0x3e, 0x42, 0x44, 0x42, 0x41, 0x41, 0x2c, 0x32, 0x3d, 0x1b, 0x26, 0x1e,
                  0x21, 0x21, 0x25, 0x33, 0x3e, 0x3d, 0x3f, 0x43, 0x45, 0x46, 0x3e, 0x43, 0x3d, 0x4c, 0x3e, 0x42, 0x44, 0x47, 0x41, 0x3d, 0x40, 0x44, 0x47, 0x45, 0x44, 0x44, 0x32, 0x38, 0x3d, 0x17, 0x24, 0x1e,
                  0xb, 0xf, 0xf, 0xf, 0x1f, 0x28, 0x28, 0x2c, 0x2f, 0x2a, 0x21, 0x37, 0x2f, 0x24, 0x22, 0x44, 0x3d, 0x3f, 0x3b, 0x35, 0x2b, 0x31, 0x2a, 0x25, 0x33, 0x3a, 0x2b, 0x26, 0x2d, 0x12, 0x23, 0x1b,
                  0x13, 0x12, 0x15, 0x1e, 0x2b, 0x2d, 0x2e, 0x32, 0x36, 0x38, 0x2d, 0x33, 0x30, 0x40, 0x33, 0x3e, 0x3a, 0x3c, 0x34, 0x2d, 0x31, 0x34, 0x36, 0x31, 0x33, 0x34, 0x28, 0x27, 0x22, 0x13, 0x13, 0x12};
				  
GLfloat xTranslate = 0.0f, xTranslateStep = .2f;
GLboolean bAnimationOn = false;

void ProcessMenu(int value) {
  switch(value) {
	case 1: bAnimationOn = true;
  }
  glutPostRedisplay();
}
				  
void RenderScene(void) {
  glClear(GL_COLOR_BUFFER_BIT);
  glPushMatrix();
  if (bAnimationOn)
	glTranslatef(-xTranslate, 0.0f, 0.0f);
  GLfloat z = 100.0f;
  glBegin(GL_POLYGON);
    glVertex3f(-140.0f, 100.0f, z);
	glVertex3f(0.0f, 100.0f, z);
	glVertex3f(-8.0f, -100.0f, z);
	glVertex3f(-140.0f, -100.0f, z);
  glEnd();
  glPopMatrix();
  
  glPushMatrix();
  if (bAnimationOn)
    glTranslatef(xTranslate, 0.0f, 0.0f);
  glBegin(GL_POLYGON);
    glVertex2f(0.0f, 100.0f);
	glVertex2f(140.0f, 100.0f);
	glVertex2f(140.0f, -100.0f);
	glVertex2f(6.0f, -100.0f);
  glEnd(); 
  glPopMatrix();
  
  glutSwapBuffers();
}

void SetupRC(void) {
  glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
  glColor3f(1.0f, 0.0f, 0.0f);
  
  // enable polygon stippling
  glEnable(GL_POLYGON_STIPPLE);
  
  // use curtain pattern to stipple
  glPolygonStipple(curtain);
}

void ChangeSize(GLsizei w, GLsizei h) {
  GLfloat nRange = 100.0f;
  
  if (h == 0)
    h = 1;
	
  glMatrixMode(GL_PROJECTION);
  glLoadIdentity();
  if (w <= h)
    glOrtho(-nRange, nRange, -nRange*h/w, nRange*h/w, -nRange, nRange);
  else
    glOrtho(-nRange*w/h, nRange*w/h, -nRange, nRange, -nRange, nRange);
  glMatrixMode(GL_MODELVIEW);
  glLoadIdentity();
}

void TimerFunction(int value) {
  if (xTranslate < 80.0f && bAnimationOn)
    xTranslate += xTranslateStep;

  glutPostRedisplay();
  glutTimerFunc(33, TimerFunction, 1);
}

int main(int argc, char **argv) {
  glutInit(&argc, argv);
  glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
  glutInitWindowSize(800, 600);
  glutCreateWindow("Polygon stipple");
  glutDisplayFunc(RenderScene);
  glutReshapeFunc(ChangeSize);
  glutTimerFunc(33, TimerFunction, 1);
  glutCreateMenu(ProcessMenu);
  glutAddMenuEntry("Start Animation", 1);
  glutAttachMenu(GLUT_RIGHT_BUTTON);
  SetupRC();
  glutMainLoop();
  return 0;
}